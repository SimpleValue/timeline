(ns animation-prototype.core
  (:require
    [reagent.core :as reagent :refer [atom]]
    [reagent.dom :as rdom]
    [reagent.session :as session]
    [reitit.frontend :as reitit]
    [clerk.core :as clerk]
    [accountant.core :as accountant]
    [animation-prototype.pages.timeline :as timeline]
    [animation-prototype.pages.animation-style-props :as animation-style-props]
    [animation-prototype.pages.animation-fn :as animation-fn]
    [animation-prototype.pages.animation-lottie :as animation-lottie]

    [sv.editor.panel :as editor-panel]
    ))

;; -------------------------
;; Routes

(def router
  (reitit/router
    [["/" :index]
     ["/animation-fn"
      ["" :animation-fn]]
     ["/animation-props"
      ["" :animation-props]]
     ["/lottie-animations"
      ["" :lottie-animations]]
     ["/timeline"
      ["" :timeline-animation]]
     ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; Page components

(defn home-page []
  (fn []
    [:span.main
     {:style {:display "flex"
              :justify-content "center"
              :flex-direction "column"
              :align-items "center"}}
     [:h1 "Animation Prototype"]
     [:p
      "This is the prototype for the animation system for Audiocado."]

     [:p [:a {:href (path-for :animation-fn)}
          "Animation Functions"]]

     [:p [:a {:href (path-for :animation-props)}
          "Animation Style Properties"]]

     [:p [:a {:href (path-for :lottie-animations)}
          "Lottie Animations"]]

     [:p [:a {:href (path-for :timeline-animation)}
          "Timeline"]]
     ]))

;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :animation-fn #'animation-fn/page
    :animation-props #'animation-style-props/page
    :timeline-animation #'editor-panel/panel
    :lottie-animations #'animation-lottie/page))

;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [page]
       [:footer
        [:p "animation-prototype was generated by Nils Pospischil"]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
    {:nav-handler
     (fn [path]
       (let [match (reitit/match-by-path router path)
             current-page (:name (:data match))
             route-params (:path-params match)]
         (reagent/after-render clerk/after-render!)
         (session/put! :route {:current-page (page-for current-page)
                               :route-params route-params})
         (clerk/navigate-page! path)
         ))
     :path-exists?
     (fn [path]
       (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
