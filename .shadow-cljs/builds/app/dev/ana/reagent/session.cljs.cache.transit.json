["^ ","~:output",["^ ","~:js","goog.provide('reagent.session');\ngoog.require('cljs.core');\ngoog.require('reagent.core');\nif((typeof reagent !== 'undefined') && (typeof reagent.session !== 'undefined') && (typeof reagent.session.state !== 'undefined')){\n} else {\nreagent.session.state = reagent.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n}\n/**\n * Returns a cursor from the state atom.\n */\nreagent.session.cursor = (function reagent$session$cursor(ks){\nreturn reagent.core.cursor(reagent.session.state,ks);\n});\n/**\n * Get the key's value from the session, returns nil if it doesn't exist.\n */\nreagent.session.get = (function reagent$session$get(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___67171 = arguments.length;\nvar i__4737__auto___67172 = (0);\nwhile(true){\nif((i__4737__auto___67172 < len__4736__auto___67171)){\nargs__4742__auto__.push((arguments[i__4737__auto___67172]));\n\nvar G__67173 = (i__4737__auto___67172 + (1));\ni__4737__auto___67172 = G__67173;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn reagent.session.get.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(reagent.session.get.cljs$core$IFn$_invoke$arity$variadic = (function (k,p__67043){\nvar vec__67044 = p__67043;\nvar default$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67044,(0),null);\nvar temp_a = cljs.core.deref(reagent.session.cursor(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null)));\nif((!((temp_a == null)))){\nreturn temp_a;\n} else {\nreturn default$;\n}\n}));\n\n(reagent.session.get.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(reagent.session.get.cljs$lang$applyTo = (function (seq67036){\nvar G__67037 = cljs.core.first(seq67036);\nvar seq67036__$1 = cljs.core.next(seq67036);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__67037,seq67036__$1);\n}));\n\nreagent.session.put_BANG_ = (function reagent$session$put_BANG_(k,v){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(reagent.session.state,cljs.core.assoc,k,v);\n});\n/**\n * Gets the value at the path specified by the vector ks from the session,\n *   returns nil if it doesn't exist.\n */\nreagent.session.get_in = (function reagent$session$get_in(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___67174 = arguments.length;\nvar i__4737__auto___67175 = (0);\nwhile(true){\nif((i__4737__auto___67175 < len__4736__auto___67174)){\nargs__4742__auto__.push((arguments[i__4737__auto___67175]));\n\nvar G__67177 = (i__4737__auto___67175 + (1));\ni__4737__auto___67175 = G__67177;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn reagent.session.get_in.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(reagent.session.get_in.cljs$core$IFn$_invoke$arity$variadic = (function (ks,p__67050){\nvar vec__67051 = p__67050;\nvar default$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67051,(0),null);\nvar result = cljs.core.deref(reagent.session.cursor(ks));\nif((!((result == null)))){\nreturn result;\n} else {\nreturn default$;\n}\n}));\n\n(reagent.session.get_in.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(reagent.session.get_in.cljs$lang$applyTo = (function (seq67047){\nvar G__67048 = cljs.core.first(seq67047);\nvar seq67047__$1 = cljs.core.next(seq67047);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__67048,seq67047__$1);\n}));\n\n/**\n * Replace the current session's value with the result of executing f with\n *   the current value and args.\n */\nreagent.session.swap_BANG_ = (function reagent$session$swap_BANG_(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___67183 = arguments.length;\nvar i__4737__auto___67184 = (0);\nwhile(true){\nif((i__4737__auto___67184 < len__4736__auto___67183)){\nargs__4742__auto__.push((arguments[i__4737__auto___67184]));\n\nvar G__67186 = (i__4737__auto___67184 + (1));\ni__4737__auto___67184 = G__67186;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn reagent.session.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(reagent.session.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_,reagent.session.state,f,args);\n}));\n\n(reagent.session.swap_BANG_.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(reagent.session.swap_BANG_.cljs$lang$applyTo = (function (seq67058){\nvar G__67059 = cljs.core.first(seq67058);\nvar seq67058__$1 = cljs.core.next(seq67058);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__67059,seq67058__$1);\n}));\n\n/**\n * Remove all data from the session and start over cleanly.\n */\nreagent.session.clear_BANG_ = (function reagent$session$clear_BANG_(){\nreturn cljs.core.reset_BANG_(reagent.session.state,cljs.core.PersistentArrayMap.EMPTY);\n});\nreagent.session.reset_BANG_ = (function reagent$session$reset_BANG_(m){\nreturn cljs.core.reset_BANG_(reagent.session.state,m);\n});\n/**\n * Remove a key from the session\n */\nreagent.session.remove_BANG_ = (function reagent$session$remove_BANG_(k){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(reagent.session.state,cljs.core.dissoc,k);\n});\n/**\n * Associates a value in the session, where ks is a\n * sequence of keys and v is the new value and returns\n * a new nested structure. If any levels do not exist,\n * hash-maps will be created.\n */\nreagent.session.assoc_in_BANG_ = (function reagent$session$assoc_in_BANG_(ks,v){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(reagent.session.state,cljs.core.assoc_in,ks,v);\n});\n/**\n * Destructive get from the session. This returns the current value of the key\n *   and then removes it from the session.\n */\nreagent.session.get_BANG_ = (function reagent$session$get_BANG_(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___67187 = arguments.length;\nvar i__4737__auto___67188 = (0);\nwhile(true){\nif((i__4737__auto___67188 < len__4736__auto___67187)){\nargs__4742__auto__.push((arguments[i__4737__auto___67188]));\n\nvar G__67189 = (i__4737__auto___67188 + (1));\ni__4737__auto___67188 = G__67189;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn reagent.session.get_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(reagent.session.get_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (k,p__67111){\nvar vec__67117 = p__67111;\nvar default$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67117,(0),null);\nvar cur = reagent.session.get.cljs$core$IFn$_invoke$arity$variadic(k,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([default$], 0));\nreagent.session.remove_BANG_(k);\n\nreturn cur;\n}));\n\n(reagent.session.get_BANG_.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(reagent.session.get_BANG_.cljs$lang$applyTo = (function (seq67098){\nvar G__67099 = cljs.core.first(seq67098);\nvar seq67098__$1 = cljs.core.next(seq67098);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__67099,seq67098__$1);\n}));\n\n/**\n * Destructive get from the session. This returns the current value of the path\n *   specified by the vector ks and then removes it from the session.\n */\nreagent.session.get_in_BANG_ = (function reagent$session$get_in_BANG_(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___67190 = arguments.length;\nvar i__4737__auto___67191 = (0);\nwhile(true){\nif((i__4737__auto___67191 < len__4736__auto___67190)){\nargs__4742__auto__.push((arguments[i__4737__auto___67191]));\n\nvar G__67192 = (i__4737__auto___67191 + (1));\ni__4737__auto___67191 = G__67192;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn reagent.session.get_in_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(reagent.session.get_in_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (ks,p__67141){\nvar vec__67142 = p__67141;\nvar default$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67142,(0),null);\nvar cur = reagent.session.get_in.cljs$core$IFn$_invoke$arity$variadic(ks,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([default$], 0));\nreagent.session.assoc_in_BANG_(ks,null);\n\nreturn cur;\n}));\n\n(reagent.session.get_in_BANG_.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(reagent.session.get_in_BANG_.cljs$lang$applyTo = (function (seq67130){\nvar G__67131 = cljs.core.first(seq67130);\nvar seq67130__$1 = cljs.core.next(seq67130);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__67131,seq67130__$1);\n}));\n\n/**\n * Updates a value in session where k is a key and f\n * is the function that takes the old value along with any\n * supplied args and return the new value. If key is not\n * present it will be added.\n */\nreagent.session.update_BANG_ = (function reagent$session$update_BANG_(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___67196 = arguments.length;\nvar i__4737__auto___67197 = (0);\nwhile(true){\nif((i__4737__auto___67197 < len__4736__auto___67196)){\nargs__4742__auto__.push((arguments[i__4737__auto___67197]));\n\nvar G__67198 = (i__4737__auto___67197 + (1));\ni__4737__auto___67197 = G__67198;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((2) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((2)),(0),null)):null);\nreturn reagent.session.update_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4743__auto__);\n});\n\n(reagent.session.update_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (k,f,args){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(reagent.session.state,(function (p1__67148_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$4(cljs.core.update,p1__67148_SHARP_,k,f),args);\n}));\n}));\n\n(reagent.session.update_BANG_.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(reagent.session.update_BANG_.cljs$lang$applyTo = (function (seq67149){\nvar G__67150 = cljs.core.first(seq67149);\nvar seq67149__$1 = cljs.core.next(seq67149);\nvar G__67151 = cljs.core.first(seq67149__$1);\nvar seq67149__$2 = cljs.core.next(seq67149__$1);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__67150,G__67151,seq67149__$2);\n}));\n\n/**\n * Updates a value in the session, where ks is a\n * sequence of keys and f is a function that will\n * take the old value along with any supplied args and return\n * the new value. If any levels do not exist, hash-maps\n * will be created.\n */\nreagent.session.update_in_BANG_ = (function reagent$session$update_in_BANG_(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___67202 = arguments.length;\nvar i__4737__auto___67203 = (0);\nwhile(true){\nif((i__4737__auto___67203 < len__4736__auto___67202)){\nargs__4742__auto__.push((arguments[i__4737__auto___67203]));\n\nvar G__67206 = (i__4737__auto___67203 + (1));\ni__4737__auto___67203 = G__67206;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((2) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((2)),(0),null)):null);\nreturn reagent.session.update_in_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4743__auto__);\n});\n\n(reagent.session.update_in_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (ks,f,args){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(reagent.session.state,(function (p1__67158_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$4(cljs.core.update_in,p1__67158_SHARP_,ks,f),args);\n}));\n}));\n\n(reagent.session.update_in_BANG_.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(reagent.session.update_in_BANG_.cljs$lang$applyTo = (function (seq67160){\nvar G__67162 = cljs.core.first(seq67160);\nvar seq67160__$1 = cljs.core.next(seq67160);\nvar G__67163 = cljs.core.first(seq67160__$1);\nvar seq67160__$2 = cljs.core.next(seq67160__$1);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__67162,G__67163,seq67160__$2);\n}));\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","reagent/session.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",["~$get","~$reset!","~$swap!","~$get-in"]],"~:name","~$reagent.session","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$reagent.core","^O","~$reagent","^O","~$cljs.core","^Q","~$goog","^R"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$atom","^O"],"~:require-macros",["^ ","^Q","^Q","^O","^O","^P","^O"],"~:form",["~#list",["~$ns","^J",["^Y",["~:refer-clojure","~:exclude",["^E","^H","^F","^G"]]],["^Y",["^T",["^O","~:as","^P","~:refer",["^V"]]]]]],"~:flags",["^ ","^T",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^R","^Q","^O"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","reagent/session.cljs"],"~:compiled-at",1601020651950,"~:resource-name","reagent/session.cljs","~:warnings",[],"~:source","(ns reagent.session\n  (:refer-clojure :exclude [get get-in reset! swap!])\n  (:require [reagent.core :as reagent :refer [atom]]))\n\n(defonce state (atom {}))\n\n(defn cursor\n  \"Returns a cursor from the state atom.\"\n  [ks]\n  (reagent/cursor state ks))\n\n(defn get\n  \"Get the key's value from the session, returns nil if it doesn't exist.\"\n  [k & [default]]\n  (let [temp-a @(cursor [k])]\n    (if-not (nil? temp-a) temp-a default)))\n\n(defn put! [k v]\n  (clojure.core/swap! state assoc k v))\n\n(defn get-in\n \"Gets the value at the path specified by the vector ks from the session,\n  returns nil if it doesn't exist.\"\n  [ks & [default]]\n  (let [result @(cursor ks)]\n    (if-not (nil? result) result default)))\n\n(defn swap!\n  \"Replace the current session's value with the result of executing f with\n  the current value and args.\"\n  [f & args]\n  (apply clojure.core/swap! state f args))\n\n(defn clear!\n  \"Remove all data from the session and start over cleanly.\"\n  []\n  (clojure.core/reset! state {}))\n\n(defn reset! [m]\n  (clojure.core/reset! state m))\n\n(defn remove!\n  \"Remove a key from the session\"\n  [k]\n  (clojure.core/swap! state dissoc k))\n\n(defn assoc-in!\n  \"Associates a value in the session, where ks is a\n   sequence of keys and v is the new value and returns\n   a new nested structure. If any levels do not exist,\n   hash-maps will be created.\"\n  [ks v]\n  (clojure.core/swap! state assoc-in  ks v))\n\n(defn get!\n  \"Destructive get from the session. This returns the current value of the key\n  and then removes it from the session.\"[k & [default]]\n  (let [cur (get k default)]\n    (remove! k)\n    cur))\n\n(defn get-in!\n  \"Destructive get from the session. This returns the current value of the path\n  specified by the vector ks and then removes it from the session.\"\n  [ks & [default]]\n    (let [cur (get-in ks default)]\n      (assoc-in! ks nil)\n      cur))\n\n(defn update!\n  \"Updates a value in session where k is a key and f\n   is the function that takes the old value along with any\n   supplied args and return the new value. If key is not\n   present it will be added.\"\n  [k f & args]\n  (clojure.core/swap!\n    state\n    #(apply (partial update % k f) args)))\n\n(defn update-in!\n  \"Updates a value in the session, where ks is a\n   sequence of keys and f is a function that will\n   take the old value along with any supplied args and return\n   the new value. If any levels do not exist, hash-maps\n   will be created.\"\n  [ks f & args]\n  (clojure.core/swap!\n    state\n    #(apply (partial update-in % ks f) args)))\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["js/reagent","js/reagent.session","js/reagent.session.state","reagent.session/state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","reagent.session/cursor","ks","reagent.core/cursor","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","reagent.session/get","p__67043","vec__67044","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq67036","G__67037","cljs.core/first","cljs.core/next","self__4723__auto__","k","default","cljs.core/deref","temp-a","reagent.session/put!","v","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","reagent.session/get-in","p__67050","vec__67051","seq67047","G__67048","result","reagent.session/swap!","seq67058","G__67059","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/swap!","reagent.session/clear!","cljs.core/reset!","reagent.session/reset!","m","reagent.session/remove!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","reagent.session/assoc-in!","cljs.core/assoc-in","reagent.session/get!","p__67111","vec__67117","seq67098","G__67099","cur","reagent.session.get.cljs$core$IFn$_invoke$arity$variadic","reagent.session/get-in!","p__67141","vec__67142","seq67130","G__67131","reagent.session.get_in.cljs$core$IFn$_invoke$arity$variadic","reagent.session/update!","seq67149","G__67150","G__67151","p1__67148#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$4","cljs.core/update","reagent.session/update-in!","seq67160","G__67162","G__67163","p1__67158#","cljs.core/update-in"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1598630799000,1598630799000,1595262809145,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^17","reagent/impl/batching.cljs"],[1599229531834,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","~$reagent.debug","~$reagent.impl.util"]]],["~:macro","^Q"],[1598630791000],["^17","goog/math/math.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","~$goog.array","~$goog.asserts"]]],["^1N","^1L"],[1599229531000],["^17","goog/array/array.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1P"]]],["^1D","node_modules/prop-types/checkPropTypes.js"],[1598630799000,1598630799000,1595262805307,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^17","reagent/impl/util.cljs"],[1599229531834,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","~$clojure.string"]]],["^17","goog/debug/error.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","goog/dom/nodetype.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^1N","^O"],[1599229531000],["^1D","node_modules/scheduler/cjs/scheduler.development.js"],[1598630799000,1598630799000,1595262809175,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^17","reagent/ratom.cljs"],[1599229531834,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^1M","^1L","~$reagent.impl.batching","~$clojure.set","~$goog.object"]]],["^1D","node_modules/scheduler/cjs/scheduler.production.min.js"],[1598630799000,1598630799000,1595262809175,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^1D","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1598630799000,1598630799000,1595262809175,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^1D","node_modules/react/index.js"],[1598630799000,1598630799000,1595262808877,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^17","shadow/js.js"],[1598630799647,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","goog/object/object.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","reagent/impl/template.cljs"],[1599229531834,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^?","^1R","~$clojure.walk","^1M","~$reagent.impl.component","^1S","~$reagent.ratom","^1L","^1U"]]],["^1D","node_modules/react-dom/cjs/react-dom.production.min.js"],[1598630799000,1598630799000,1595262809145,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","^?","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1598630799000,1598630791000],["^1D","node_modules/react/cjs/react.development.js"],[1598630799000,1598630799000,1595262808877,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","^1[","~$module$node_modules$prop_types$checkPropTypes"]]],["^1N","^1Z"],[1599229531000],["^17","goog/math/long.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1P","~$goog.reflect"]]],["^17","goog/string/internal.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^1D","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1598630799000,1598630799000,1595262809175,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^17","goog/functions/functions.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","reagent/impl/component.cljs"],[1599229531834,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^1U","^?","^1M","^1S","^1Z","^1L"]]],["^17","clojure/walk.cljs"],[1598630791482,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q"]]],["^17","goog/structs/map.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1D","node_modules/scheduler/index.js"],[1598630799000,1598630799000,1595262809175,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^17","goog/asserts/asserts.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^17","goog/uri/uri.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1O","^1P","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1D","node_modules/object-assign/index.js"],[1598630799000,1598630799000,1595262804864,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^17","goog/base.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",[]]],["^17","goog/structs/structs.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1O","^1U"]]],["^17","clojure/string.cljs"],[1598630791482,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^2:","~$goog.string.StringBuffer"]]],["^1D","node_modules/react/cjs/react.production.min.js"],[1598630799000,1598630799000,1595262808877,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","^1["]]],["^17","goog/string/string.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","~$goog.string.internal"]]],["^17","goog/reflect/reflect.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","reagent/core.cljs"],[1599229531834,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^?","~$reagent.impl.template","^1Y","^1M","^1S","^1Z","^1L","~$reagent.dom"]]],["^17","reagent/session.cljs"],[1598630792710,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^O"]]],["^17","goog/string/stringbuffer.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","goog/iter/iter.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1O","^1P","~$goog.functions","~$goog.math"]]],["^17","reagent/dom.cljs"],[1599229531834,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^A","^1M","^2B","^1S","^1Z"]]],["^1D","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1598630799000,1598630799000,1595262805307,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^17","cljs/core.cljs"],[1598630791482,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["~$goog.math.Long","~$goog.math.Integer","^2:","^1U","^1O","~$goog.Uri","^2@"]]],["^17","reagent/debug.cljs"],[1599229531834,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q"]]],["^17","goog/math/integer.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^1D","node_modules/scheduler/tracing.js"],[1598630799000,1598630799000,1595262809175,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^1D","node_modules/react-dom/cjs/react-dom.development.js"],[1598630799000,1598630799000,1595262809145,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","^?","^1[","^20","^22","~$module$node_modules$scheduler$tracing"]]],["^17","clojure/set.cljs"],[1598630791482,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q"]]],["^17","goog/uri/utils.js"],[1597226449268,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1O","^1P","^2:"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","reagent/session.cljs","^7",1,"^8",5,"^9",1,"^:",20],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",["^E","^F","^G","^H"]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^O","^Q","^Q","^R","^R"],"^S",["^D",["^T"]],"^U",["^ ","^V","^O"],"~:defs",["^ ","~$assoc-in!",["^ ","~:protocol-inline",null,"^5",["^ ","^6","reagent/session.cljs","^7",47,"^8",7,"^9",47,"^:",16,"~:arglists",["^Y",["~$quote",["^Y",[["~$ks","~$v"]]]]],"~:doc","Associates a value in the session, where ks is a\n   sequence of keys and v is the new value and returns\n   a new nested structure. If any levels do not exist,\n   hash-maps will be created."],"^I","~$reagent.session/assoc-in!","^6","reagent/session.cljs","^:",16,"~:method-params",["^Y",[["^2R","~$v"]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^8",1,"~:variadic?",false,"^7",47,"~:ret-tag",["^D",[null,"~$any"]],"^9",47,"~:max-fixed-arity",2,"~:fn-var",true,"^2P",["^Y",["^2Q",["^Y",[["^2R","~$v"]]]]],"^2S","Associates a value in the session, where ks is a\n   sequence of keys and v is the new value and returns\n   a new nested structure. If any levels do not exist,\n   hash-maps will be created."],"~$remove!",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",42,"^8",7,"^9",42,"^:",14,"^2P",["^Y",["^2Q",["^Y",[["~$k"]]]]],"^2S","Remove a key from the session"],"^I","~$reagent.session/remove!","^6","reagent/session.cljs","^:",14,"^2U",["^Y",[["~$k"]]],"^2V",null,"^2W",["^Y",[null,null]],"^8",1,"^2X",false,"^7",42,"^2Y",["^D",[null,"^2Z"]],"^9",42,"^2[",1,"^30",true,"^2P",["^Y",["^2Q",["^Y",[["~$k"]]]]],"^2S","Remove a key from the session"],"~$update-in!",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",80,"^8",7,"^9",80,"^:",17,"^2P",["^Y",["^2Q",["^Y",[["^2R","~$f","~$&","~$args"]]]]],"^2S","Updates a value in the session, where ks is a\n   sequence of keys and f is a function that will\n   take the old value along with any supplied args and return\n   the new value. If any levels do not exist, hash-maps\n   will be created.","~:top-fn",["^ ","^2X",true,"~:fixed-arity",2,"^2[",2,"^2U",[["^Y",["^2R","~$f","^34"]]],"^2P",["^Y",[["^2R","~$f","~$&","^34"]]],"^2W",["^Y",[null]]]],"^I","~$reagent.session/update-in!","^6","reagent/session.cljs","^:",17,"^35",["^ ","^2X",true,"^36",2,"^2[",2,"^2U",[["^Y",["^2R","~$f","^34"]]],"^2P",["^Y",[["^2R","~$f","~$&","^34"]]],"^2W",["^Y",[null]]],"^2U",[["^Y",["^2R","~$f","^34"]]],"^2V",null,"^36",2,"^2W",["^Y",[null]],"^8",1,"^2X",true,"~:methods",[["^ ","^36",2,"^2X",true,"~:tag",["^D",[null,"^2Z"]]]],"^7",80,"^2Y","^2Z","^9",80,"^2[",2,"^30",true,"^2P",["^Y",[["^2R","~$f","~$&","^34"]]],"^2S","Updates a value in the session, where ks is a\n   sequence of keys and f is a function that will\n   take the old value along with any supplied args and return\n   the new value. If any levels do not exist, hash-maps\n   will be created."],"~$get-in!",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",62,"^8",7,"^9",62,"^:",14,"^2P",["^Y",["^2Q",["^Y",[["^2R","~$&",["~$default"]]]]]],"^2S","Destructive get from the session. This returns the current value of the path\n  specified by the vector ks and then removes it from the session.","^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["^2R",["^3;"]]]],"^2P",["^Y",[["^2R","~$&",["^3;"]]]],"^2W",["^Y",[null]]]],"^I","~$reagent.session/get-in!","^6","reagent/session.cljs","^:",14,"^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["^2R",["^3;"]]]],"^2P",["^Y",[["^2R","~$&",["^3;"]]]],"^2W",["^Y",[null]]],"^2U",[["^Y",["^2R",["^3;"]]]],"^2V",null,"^36",1,"^2W",["^Y",[null]],"^8",1,"^2X",true,"^38",[["^ ","^36",1,"^2X",true,"^39",["^D",[null,"^2Z","~$clj-nil"]]]],"^7",62,"^2Y","^2Z","^9",62,"^2[",1,"^30",true,"^2P",["^Y",[["^2R","~$&",["^3;"]]]],"^2S","Destructive get from the session. This returns the current value of the path\n  specified by the vector ks and then removes it from the session."],"^E",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",12,"^8",7,"^9",12,"^:",10,"^2P",["^Y",["^2Q",["^Y",[["~$k","~$&",["^3;"]]]]]],"^2S","Get the key's value from the session, returns nil if it doesn't exist.","^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["~$k",["^3;"]]]],"^2P",["^Y",[["~$k","~$&",["^3;"]]]],"^2W",["^Y",[null]]]],"^I","~$reagent.session/get","^6","reagent/session.cljs","^:",10,"^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["~$k",["^3;"]]]],"^2P",["^Y",[["~$k","~$&",["^3;"]]]],"^2W",["^Y",[null]]],"^2U",[["^Y",["~$k",["^3;"]]]],"^2V",null,"^36",1,"^2W",["^Y",[null]],"^8",1,"^2X",true,"^38",[["^ ","^36",1,"^2X",true,"^39",["^D",[null,"^2Z","^3="]]]],"^7",12,"^2Y","^2Z","^9",12,"^2[",1,"^30",true,"^2P",["^Y",[["~$k","~$&",["^3;"]]]],"^2S","Get the key's value from the session, returns nil if it doesn't exist."],"^F",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",39,"^8",7,"^9",39,"^:",13,"^2P",["^Y",["^2Q",["^Y",[["~$m"]]]]]],"^I","~$reagent.session/reset!","^6","reagent/session.cljs","^:",13,"^2U",["^Y",[["~$m"]]],"^2V",null,"^2W",["^Y",[null,null]],"^8",1,"^2X",false,"^7",39,"^2Y",["^D",[null,"^2Z"]],"^9",39,"^2[",1,"^30",true,"^2P",["^Y",["^2Q",["^Y",[["~$m"]]]]]],"~$cursor",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",7,"^8",7,"^9",7,"^:",13,"^2P",["^Y",["^2Q",["^Y",[["^2R"]]]]],"^2S","Returns a cursor from the state atom."],"^I","~$reagent.session/cursor","^6","reagent/session.cljs","^:",13,"^2U",["^Y",[["^2R"]]],"^2V",null,"^2W",["^Y",[null,null]],"^8",1,"^2X",false,"^7",7,"^2Y","~$reagent.ratom/RCursor","^9",7,"^2[",1,"^30",true,"^2P",["^Y",["^2Q",["^Y",[["^2R"]]]]],"^2S","Returns a cursor from the state atom."],"~$get!",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",55,"^8",7,"^9",55,"^:",11,"^2P",["^Y",["^2Q",["^Y",[["~$k","~$&",["^3;"]]]]]],"^2S","Destructive get from the session. This returns the current value of the key\n  and then removes it from the session.","^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["~$k",["^3;"]]]],"^2P",["^Y",[["~$k","~$&",["^3;"]]]],"^2W",["^Y",[null]]]],"^I","~$reagent.session/get!","^6","reagent/session.cljs","^:",11,"^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["~$k",["^3;"]]]],"^2P",["^Y",[["~$k","~$&",["^3;"]]]],"^2W",["^Y",[null]]],"^2U",[["^Y",["~$k",["^3;"]]]],"^2V",null,"^36",1,"^2W",["^Y",[null]],"^8",1,"^2X",true,"^38",[["^ ","^36",1,"^2X",true,"^39",["^D",[null,"^2Z","^3="]]]],"^7",55,"^2Y","^2Z","^9",55,"^2[",1,"^30",true,"^2P",["^Y",[["~$k","~$&",["^3;"]]]],"^2S","Destructive get from the session. This returns the current value of the key\n  and then removes it from the session."],"~$state",["^ ","^I","~$reagent.session/state","^6","reagent/session.cljs","^7",5,"^8",1,"^9",5,"^:",15,"^5",["^ ","^6","reagent/session.cljs","^7",5,"^8",10,"^9",5,"^:",15],"^39","~$reagent.ratom/RAtom"],"^G",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",28,"^8",7,"^9",28,"^:",12,"^2P",["^Y",["^2Q",["^Y",[["~$f","~$&","^34"]]]]],"^2S","Replace the current session's value with the result of executing f with\n  the current value and args.","^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["~$f","^34"]]],"^2P",["^Y",[["~$f","~$&","^34"]]],"^2W",["^Y",[null]]]],"^I","~$reagent.session/swap!","^6","reagent/session.cljs","^:",12,"^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["~$f","^34"]]],"^2P",["^Y",[["~$f","~$&","^34"]]],"^2W",["^Y",[null]]],"^2U",[["^Y",["~$f","^34"]]],"^2V",null,"^36",1,"^2W",["^Y",[null]],"^8",1,"^2X",true,"^38",[["^ ","^36",1,"^2X",true,"^39","^2Z"]],"^7",28,"^2Y","^2Z","^9",28,"^2[",1,"^30",true,"^2P",["^Y",[["~$f","~$&","^34"]]],"^2S","Replace the current session's value with the result of executing f with\n  the current value and args."],"~$clear!",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",34,"^8",7,"^9",34,"^:",13,"^2P",["^Y",["^2Q",["^Y",[[]]]]],"^2S","Remove all data from the session and start over cleanly."],"^I","~$reagent.session/clear!","^6","reagent/session.cljs","^:",13,"^2U",["^Y",[[]]],"^2V",null,"^2W",["^Y",[null,null]],"^8",1,"^2X",false,"^7",34,"^2Y",["^D",[null,"^2Z"]],"^9",34,"^2[",0,"^30",true,"^2P",["^Y",["^2Q",["^Y",[[]]]]],"^2S","Remove all data from the session and start over cleanly."],"~$update!",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",70,"^8",7,"^9",70,"^:",14,"^2P",["^Y",["^2Q",["^Y",[["~$k","~$f","~$&","^34"]]]]],"^2S","Updates a value in session where k is a key and f\n   is the function that takes the old value along with any\n   supplied args and return the new value. If key is not\n   present it will be added.","^35",["^ ","^2X",true,"^36",2,"^2[",2,"^2U",[["^Y",["~$k","~$f","^34"]]],"^2P",["^Y",[["~$k","~$f","~$&","^34"]]],"^2W",["^Y",[null]]]],"^I","~$reagent.session/update!","^6","reagent/session.cljs","^:",14,"^35",["^ ","^2X",true,"^36",2,"^2[",2,"^2U",[["^Y",["~$k","~$f","^34"]]],"^2P",["^Y",[["~$k","~$f","~$&","^34"]]],"^2W",["^Y",[null]]],"^2U",[["^Y",["~$k","~$f","^34"]]],"^2V",null,"^36",2,"^2W",["^Y",[null]],"^8",1,"^2X",true,"^38",[["^ ","^36",2,"^2X",true,"^39",["^D",[null,"^2Z"]]]],"^7",70,"^2Y","^2Z","^9",70,"^2[",2,"^30",true,"^2P",["^Y",[["~$k","~$f","~$&","^34"]]],"^2S","Updates a value in session where k is a key and f\n   is the function that takes the old value along with any\n   supplied args and return the new value. If key is not\n   present it will be added."],"~$put!",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",18,"^8",7,"^9",18,"^:",11,"^2P",["^Y",["^2Q",["^Y",[["~$k","~$v"]]]]]],"^I","~$reagent.session/put!","^6","reagent/session.cljs","^:",11,"^2U",["^Y",[["~$k","~$v"]]],"^2V",null,"^2W",["^Y",[null,null]],"^8",1,"^2X",false,"^7",18,"^2Y",["^D",[null,"^2Z"]],"^9",18,"^2[",2,"^30",true,"^2P",["^Y",["^2Q",["^Y",[["~$k","~$v"]]]]]],"^H",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",21,"^8",7,"^9",21,"^:",13,"^2P",["^Y",["^2Q",["^Y",[["^2R","~$&",["^3;"]]]]]],"^2S","Gets the value at the path specified by the vector ks from the session,\n  returns nil if it doesn't exist.","^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["^2R",["^3;"]]]],"^2P",["^Y",[["^2R","~$&",["^3;"]]]],"^2W",["^Y",[null]]]],"^I","~$reagent.session/get-in","^6","reagent/session.cljs","^:",13,"^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["^2R",["^3;"]]]],"^2P",["^Y",[["^2R","~$&",["^3;"]]]],"^2W",["^Y",[null]]],"^2U",[["^Y",["^2R",["^3;"]]]],"^2V",null,"^36",1,"^2W",["^Y",[null]],"^8",1,"^2X",true,"^38",[["^ ","^36",1,"^2X",true,"^39",["^D",[null,"^2Z","^3="]]]],"^7",21,"^2Y","^2Z","^9",21,"^2[",1,"^30",true,"^2P",["^Y",[["^2R","~$&",["^3;"]]]],"^2S","Gets the value at the path specified by the vector ks from the session,\n  returns nil if it doesn't exist."]],"^W",["^ ","^Q","^Q","^O","^O","^P","^O"],"^13",["^ ","^T",["^D",[]]],"^14",["^ "],"^15",["^R","^Q","^O"]],"^L","^J","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1C",[["^3R","~:static-fns"],true,["^3R","~:elide-asserts"],false,["^3R","~:optimize-constants"],null,["^3R","^1:"],null,["^3R","~:external-config"],null,["^3R","~:tooling-config"],null,["^3R","~:emit-constants"],null,["^3R","~:load-tests"],null,["^3R","~:infer-externs"],true,["^3R","^1<"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3R","~:fn-invoke-direct"],null,["^3R","~:source-map"],"/dev/null"]]]