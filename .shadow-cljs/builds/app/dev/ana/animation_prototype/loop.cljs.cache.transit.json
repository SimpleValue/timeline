["^ ","~:output",["^ ","~:js","goog.provide('animation_prototype.loop');\ngoog.require('cljs.core');\n/**\n * The `animation-loop` expects a function `animate` that takes one\n *     argument: the animation-time. The `animate` function should return a\n *     sequence of `render-operations` which represent the side-effects as\n *     data that are necessary to render the animation at the given\n *     animation-time. The `render-operations` are passed to the `render!`\n *     function that performs the side-effects. The loop runs until\n *     `animate` returns a falsy value.\n */\nanimation_prototype.loop.animation_loop = (function animation_prototype$loop$animation_loop(animation,render_BANG_){\nvar start_real_time = performance.now();\nreturn requestAnimationFrame((function animation_prototype$loop$animation_loop_$_animation_loop_callback(real_time){\nvar animation_time = (real_time - start_real_time);\nvar map__67245 = animation;\nvar map__67245__$1 = (((((!((map__67245 == null))))?(((((map__67245.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__67245.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__67245):map__67245);\nvar duration = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__67245__$1,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068));\nvar render = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__67245__$1,new cljs.core.Keyword(null,\"render\",\"render\",-1408033454));\nvar time_fraction = (animation_time / duration);\nif((time_fraction < (1))){\nvar G__67251_67258 = (render.cljs$core$IFn$_invoke$arity$1 ? render.cljs$core$IFn$_invoke$arity$1(time_fraction) : render.call(null,time_fraction));\n(render_BANG_.cljs$core$IFn$_invoke$arity$1 ? render_BANG_.cljs$core$IFn$_invoke$arity$1(G__67251_67258) : render_BANG_.call(null,G__67251_67258));\n\nreturn requestAnimationFrame(animation_prototype$loop$animation_loop_$_animation_loop_callback);\n} else {\nvar G__67252 = (render.cljs$core$IFn$_invoke$arity$1 ? render.cljs$core$IFn$_invoke$arity$1((1)) : render.call(null,(1)));\nreturn (render_BANG_.cljs$core$IFn$_invoke$arity$1 ? render_BANG_.cljs$core$IFn$_invoke$arity$1(G__67252) : render_BANG_.call(null,G__67252));\n}\n}));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","animation_prototype/loop.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",29],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$animation-prototype.loop","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^K","~$goog","^L"],"~:seen",["^D",[]],"~:uses",null,"~:require-macros",["^ ","^K","^K"],"~:form",["~#list",["~$ns","^F"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^L","^K"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","animation_prototype/loop.cljs"],"~:compiled-at",1601020651986,"~:resource-name","animation_prototype/loop.cljs","~:warnings",[],"~:source","(ns animation-prototype.loop)\n\n(defn animation-loop\n      ;; TODO: adapt doc: the `animate` returns a function that takes the\n      ;; `animation-time` as first argument. This function returns a\n      ;; sequence of render-operations or `nil`, if the end duration of\n      ;; the animation has been reached. The passed `render` function is\n      ;; called with the time-fraction, which is the fraction between the\n      ;; `animation-time` and the `duration` (in milliseconds). Thereby\n      ;; `time-fraction` is normalized between 0 and 1.\n      \"The `animation-loop` expects a function `animate` that takes one\n       argument: the animation-time. The `animate` function should return a\n       sequence of `render-operations` which represent the side-effects as\n       data that are necessary to render the animation at the given\n       animation-time. The `render-operations` are passed to the `render!`\n       function that performs the side-effects. The loop runs until\n       `animate` returns a falsy value.\"\n      [animation render!]\n      (let [start-real-time (js/performance.now)]\n           (js/requestAnimationFrame\n             (fn animation-loop-callback [real-time]\n                 (let [animation-time (- real-time\n                                         start-real-time)\n                       {:keys [duration render]} animation\n                       time-fraction (/ animation-time\n                                        duration)]\n                      (if (< time-fraction 1)\n                        (do\n                          (render! (render time-fraction))\n                          (js/requestAnimationFrame animation-loop-callback))\n                        (render! (render 1))))))))\n\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;AAEA;;;;;;;;;AAAA,AAAMA,AAeCC,AAAUC;AAfjB,AAgBM,AAAMC,AAAgB,AAACC;AAAvB,AACK,AAACC,AACC,AAA6BC;AAA7B,AACI,AAAMM,AAAe,AAAGN,AACAH;AADxBI,AAEgCN;AAFhCM,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAEcM;AAFd,AAAAF,AAAAJ,AAAA,AAEuBO;AACjBC,AAAc,AAAGH,AACAC;AAJvB,AAKK,AAAI,AAAA,AAAGE;AACL,AACE,AAAAC,AAAS,AAACF,AAAAA,AAAAA,AAAOC,AAAAA;AAAjB,AAAA,AAAAC,AAAAA,AAACd,AAAAA,AAAAA;;AACD,AAACG,AAAyBY;;AAC5B,AAAAC,AAAS,AAAA,AAAA,AAACJ,AAAAA,AAAAA;AAAV,AAAA,AAAAI,AAAAA,AAAChB,AAAAA,AAAAA","names",["animation-prototype.loop/animation-loop","animation","render!","start-real-time","js/performance.now","js/requestAnimationFrame","real-time","map__67245","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","animation-time","duration","render","time-fraction","G__67251","animation-loop-callback","G__67252"]]],"~:cache-keys",["~#cmap",[["~:macro","^K"],[1598630791000],["^W","goog/math/math.js"],[1597226449268,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["^L","~$goog.array","~$goog.asserts"]]],["^W","goog/array/array.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","^1>"]]],["^W","goog/debug/error.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L"]]],["^W","goog/dom/nodetype.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L"]]],["^W","goog/object/object.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L"]]],"~:SHADOW-TIMESTAMP",[1598630799000,1598630791000],["^W","goog/math/long.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","^1>","~$goog.reflect"]]],["^W","goog/string/internal.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L"]]],["^W","goog/functions/functions.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L"]]],["^W","goog/structs/map.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^W","goog/asserts/asserts.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^W","goog/uri/uri.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","^1=","^1>","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^W","goog/base.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",[]]],["^W","goog/structs/structs.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","^1=","~$goog.object"]]],["^W","goog/string/string.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","~$goog.string.internal"]]],["^W","goog/reflect/reflect.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L"]]],["^W","animation_prototype/loop.cljs"],[1600075345257,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","^K"]]],["^W","goog/string/stringbuffer.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L"]]],["^W","goog/iter/iter.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","^1=","^1>","~$goog.functions","~$goog.math"]]],["^W","cljs/core.cljs"],[1598630791482,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["~$goog.math.Long","~$goog.math.Integer","^1E","^1K","^1=","~$goog.Uri","~$goog.string.StringBuffer"]]],["^W","goog/math/integer.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L"]]],["^W","goog/uri/utils.js"],[1597226449268,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","^1=","^1>","^1E"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","animation_prototype/loop.cljs","^7",1,"^8",5,"^9",1,"^:",29],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"~:shadow/js-access-properties",["^D",["now"]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L"],"^M",["^D",[]],"~:shadow/js-access-global",["^D",["requestAnimationFrame","performance"]],"^N",null,"~:defs",["^ ","~$animation-loop",["^ ","~:protocol-inline",null,"^5",["^ ","^6","animation_prototype/loop.cljs","^7",3,"^8",7,"^9",3,"^:",21,"~:arglists",["^Q",["~$quote",["^Q",[["~$animation","~$render!"]]]]],"~:doc","The `animation-loop` expects a function `animate` that takes one\n       argument: the animation-time. The `animate` function should return a\n       sequence of `render-operations` which represent the side-effects as\n       data that are necessary to render the animation at the given\n       animation-time. The `render-operations` are passed to the `render!`\n       function that performs the side-effects. The loop runs until\n       `animate` returns a falsy value."],"^E","~$animation-prototype.loop/animation-loop","^6","animation_prototype/loop.cljs","^:",21,"~:method-params",["^Q",[["^1[","^20"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^8",1,"~:variadic?",false,"^7",3,"~:ret-tag","~$js","^9",3,"~:max-fixed-arity",2,"~:fn-var",true,"^1Y",["^Q",["^1Z",["^Q",[["^1[","^20"]]]]],"^21","The `animation-loop` expects a function `animate` that takes one\n       argument: the animation-time. The `animate` function should return a\n       sequence of `render-operations` which represent the side-effects as\n       data that are necessary to render the animation at the given\n       animation-time. The `render-operations` are passed to the `render!`\n       function that performs the side-effects. The loop runs until\n       `animate` returns a falsy value."]],"^O",["^ ","^K","^K"],"~:cljs.analyzer/constants",["^ ","^M",["^D",["~:duration","~:render"]],"~:order",["^2<","^2="]],"^S",["^ "],"^T",["^ "],"^U",["^L","^K"]],"^H","^F","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^17",[["^2A","~:static-fns"],true,["^2A","~:elide-asserts"],false,["^2A","~:optimize-constants"],null,["^2A","^Z"],null,["^2A","~:external-config"],null,["^2A","~:tooling-config"],null,["^2A","~:emit-constants"],null,["^2A","~:load-tests"],null,["^2A","~:infer-externs"],true,["^2A","^10"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^2A","~:fn-invoke-direct"],null,["^2A","~:source-map"],"/dev/null"]]]